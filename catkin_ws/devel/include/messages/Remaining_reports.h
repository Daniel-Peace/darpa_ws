// Generated by gencpp from file messages/Remaining_reports.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_REMAINING_REPORTS_H
#define MESSAGES_MESSAGE_REMAINING_REPORTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <messages/Critical.h>
#include <messages/Vitals.h>
#include <messages/Injury.h>

namespace messages
{
template <class ContainerAllocator>
struct Remaining_reports_
{
  typedef Remaining_reports_<ContainerAllocator> Type;

  Remaining_reports_()
    : critical()
    , vitals()
    , injury()  {
    }
  Remaining_reports_(const ContainerAllocator& _alloc)
    : critical(_alloc)
    , vitals(_alloc)
    , injury(_alloc)  {
  (void)_alloc;
    }



   typedef  ::messages::Critical_<ContainerAllocator>  _critical_type;
  _critical_type critical;

   typedef  ::messages::Vitals_<ContainerAllocator>  _vitals_type;
  _vitals_type vitals;

   typedef  ::messages::Injury_<ContainerAllocator>  _injury_type;
  _injury_type injury;





  typedef boost::shared_ptr< ::messages::Remaining_reports_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::Remaining_reports_<ContainerAllocator> const> ConstPtr;

}; // struct Remaining_reports_

typedef ::messages::Remaining_reports_<std::allocator<void> > Remaining_reports;

typedef boost::shared_ptr< ::messages::Remaining_reports > Remaining_reportsPtr;
typedef boost::shared_ptr< ::messages::Remaining_reports const> Remaining_reportsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::Remaining_reports_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::Remaining_reports_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::Remaining_reports_<ContainerAllocator1> & lhs, const ::messages::Remaining_reports_<ContainerAllocator2> & rhs)
{
  return lhs.critical == rhs.critical &&
    lhs.vitals == rhs.vitals &&
    lhs.injury == rhs.injury;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::Remaining_reports_<ContainerAllocator1> & lhs, const ::messages::Remaining_reports_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::Remaining_reports_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::Remaining_reports_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Remaining_reports_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Remaining_reports_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Remaining_reports_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Remaining_reports_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::Remaining_reports_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d18ac92b88307708af88871aae17ed91";
  }

  static const char* value(const ::messages::Remaining_reports_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd18ac92b88307708ULL;
  static const uint64_t static_value2 = 0xaf88871aae17ed91ULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::Remaining_reports_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/Remaining_reports";
  }

  static const char* value(const ::messages::Remaining_reports_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::Remaining_reports_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Critical    critical\n"
"Vitals      vitals \n"
"Injury      injury\n"
"================================================================================\n"
"MSG: messages/Critical\n"
"int32   hemorrhage\n"
"int32   distress\n"
"================================================================================\n"
"MSG: messages/Vitals\n"
"int32 heart\n"
"int32 respiratory\n"
"================================================================================\n"
"MSG: messages/Injury\n"
"int32   trauma_head\n"
"int32   trauma_torso\n"
"int32   trauma_lower_ext\n"
"int32   trauma_upper_ext\n"
"int32   trauma_ocular\n"
"int32   alertness_ocular\n"
"int32   alertness_verbal\n"
"int32   alertness_motor\n"
;
  }

  static const char* value(const ::messages::Remaining_reports_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::Remaining_reports_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.critical);
      stream.next(m.vitals);
      stream.next(m.injury);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Remaining_reports_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::Remaining_reports_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::Remaining_reports_<ContainerAllocator>& v)
  {
    s << indent << "critical: ";
    s << std::endl;
    Printer< ::messages::Critical_<ContainerAllocator> >::stream(s, indent + "  ", v.critical);
    s << indent << "vitals: ";
    s << std::endl;
    Printer< ::messages::Vitals_<ContainerAllocator> >::stream(s, indent + "  ", v.vitals);
    s << indent << "injury: ";
    s << std::endl;
    Printer< ::messages::Injury_<ContainerAllocator> >::stream(s, indent + "  ", v.injury);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_REMAINING_REPORTS_H
