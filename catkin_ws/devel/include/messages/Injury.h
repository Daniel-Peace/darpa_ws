// Generated by gencpp from file messages/Injury.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_INJURY_H
#define MESSAGES_MESSAGE_INJURY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct Injury_
{
  typedef Injury_<ContainerAllocator> Type;

  Injury_()
    : trauma_head(0)
    , trauma_torso(0)
    , trauma_lower_ext(0)
    , trauma_upper_ext(0)
    , trauma_ocular(0)
    , alertness_ocular(0)
    , alertness_verbal(0)
    , alertness_motor(0)  {
    }
  Injury_(const ContainerAllocator& _alloc)
    : trauma_head(0)
    , trauma_torso(0)
    , trauma_lower_ext(0)
    , trauma_upper_ext(0)
    , trauma_ocular(0)
    , alertness_ocular(0)
    , alertness_verbal(0)
    , alertness_motor(0)  {
  (void)_alloc;
    }



   typedef int32_t _trauma_head_type;
  _trauma_head_type trauma_head;

   typedef int32_t _trauma_torso_type;
  _trauma_torso_type trauma_torso;

   typedef int32_t _trauma_lower_ext_type;
  _trauma_lower_ext_type trauma_lower_ext;

   typedef int32_t _trauma_upper_ext_type;
  _trauma_upper_ext_type trauma_upper_ext;

   typedef int32_t _trauma_ocular_type;
  _trauma_ocular_type trauma_ocular;

   typedef int32_t _alertness_ocular_type;
  _alertness_ocular_type alertness_ocular;

   typedef int32_t _alertness_verbal_type;
  _alertness_verbal_type alertness_verbal;

   typedef int32_t _alertness_motor_type;
  _alertness_motor_type alertness_motor;





  typedef boost::shared_ptr< ::messages::Injury_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::Injury_<ContainerAllocator> const> ConstPtr;

}; // struct Injury_

typedef ::messages::Injury_<std::allocator<void> > Injury;

typedef boost::shared_ptr< ::messages::Injury > InjuryPtr;
typedef boost::shared_ptr< ::messages::Injury const> InjuryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::Injury_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::Injury_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::Injury_<ContainerAllocator1> & lhs, const ::messages::Injury_<ContainerAllocator2> & rhs)
{
  return lhs.trauma_head == rhs.trauma_head &&
    lhs.trauma_torso == rhs.trauma_torso &&
    lhs.trauma_lower_ext == rhs.trauma_lower_ext &&
    lhs.trauma_upper_ext == rhs.trauma_upper_ext &&
    lhs.trauma_ocular == rhs.trauma_ocular &&
    lhs.alertness_ocular == rhs.alertness_ocular &&
    lhs.alertness_verbal == rhs.alertness_verbal &&
    lhs.alertness_motor == rhs.alertness_motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::Injury_<ContainerAllocator1> & lhs, const ::messages::Injury_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::Injury_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::Injury_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Injury_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Injury_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Injury_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Injury_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::Injury_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea36f64e92a1aa168772ef9085fb9507";
  }

  static const char* value(const ::messages::Injury_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea36f64e92a1aa16ULL;
  static const uint64_t static_value2 = 0x8772ef9085fb9507ULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::Injury_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/Injury";
  }

  static const char* value(const ::messages::Injury_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::Injury_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   trauma_head\n"
"int32   trauma_torso\n"
"int32   trauma_lower_ext\n"
"int32   trauma_upper_ext\n"
"int32   trauma_ocular\n"
"int32   alertness_ocular\n"
"int32   alertness_verbal\n"
"int32   alertness_motor\n"
;
  }

  static const char* value(const ::messages::Injury_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::Injury_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trauma_head);
      stream.next(m.trauma_torso);
      stream.next(m.trauma_lower_ext);
      stream.next(m.trauma_upper_ext);
      stream.next(m.trauma_ocular);
      stream.next(m.alertness_ocular);
      stream.next(m.alertness_verbal);
      stream.next(m.alertness_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Injury_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::Injury_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::Injury_<ContainerAllocator>& v)
  {
    s << indent << "trauma_head: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trauma_head);
    s << indent << "trauma_torso: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trauma_torso);
    s << indent << "trauma_lower_ext: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trauma_lower_ext);
    s << indent << "trauma_upper_ext: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trauma_upper_ext);
    s << indent << "trauma_ocular: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trauma_ocular);
    s << indent << "alertness_ocular: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alertness_ocular);
    s << indent << "alertness_verbal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alertness_verbal);
    s << indent << "alertness_motor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alertness_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_INJURY_H
