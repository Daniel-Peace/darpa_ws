// Generated by gencpp from file messages/Vitals.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_VITALS_H
#define MESSAGES_MESSAGE_VITALS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct Vitals_
{
  typedef Vitals_<ContainerAllocator> Type;

  Vitals_()
    : heart(0)
    , respiratory(0)  {
    }
  Vitals_(const ContainerAllocator& _alloc)
    : heart(0)
    , respiratory(0)  {
  (void)_alloc;
    }



   typedef int32_t _heart_type;
  _heart_type heart;

   typedef int32_t _respiratory_type;
  _respiratory_type respiratory;





  typedef boost::shared_ptr< ::messages::Vitals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::Vitals_<ContainerAllocator> const> ConstPtr;

}; // struct Vitals_

typedef ::messages::Vitals_<std::allocator<void> > Vitals;

typedef boost::shared_ptr< ::messages::Vitals > VitalsPtr;
typedef boost::shared_ptr< ::messages::Vitals const> VitalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::Vitals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::Vitals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::Vitals_<ContainerAllocator1> & lhs, const ::messages::Vitals_<ContainerAllocator2> & rhs)
{
  return lhs.heart == rhs.heart &&
    lhs.respiratory == rhs.respiratory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::Vitals_<ContainerAllocator1> & lhs, const ::messages::Vitals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::Vitals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::Vitals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Vitals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Vitals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Vitals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Vitals_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::Vitals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d419d9c4365749288a9e6c5033a7520";
  }

  static const char* value(const ::messages::Vitals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d419d9c43657492ULL;
  static const uint64_t static_value2 = 0x88a9e6c5033a7520ULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::Vitals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/Vitals";
  }

  static const char* value(const ::messages::Vitals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::Vitals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 heart\n"
"int32 respiratory\n"
;
  }

  static const char* value(const ::messages::Vitals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::Vitals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heart);
      stream.next(m.respiratory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vitals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::Vitals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::Vitals_<ContainerAllocator>& v)
  {
    s << indent << "heart: ";
    Printer<int32_t>::stream(s, indent + "  ", v.heart);
    s << indent << "respiratory: ";
    Printer<int32_t>::stream(s, indent + "  ", v.respiratory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_VITALS_H
