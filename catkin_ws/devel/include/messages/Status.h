// Generated by gencpp from file messages/Status.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_STATUS_H
#define MESSAGES_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <messages/Remaining_reports.h>

namespace messages
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : clock(0.0)
    , team()
    , user()
    , remaining_reports()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : clock(0.0)
    , team(_alloc)
    , user(_alloc)
    , remaining_reports(_alloc)  {
  (void)_alloc;
    }



   typedef double _clock_type;
  _clock_type clock;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _team_type;
  _team_type team;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_type;
  _user_type user;

   typedef  ::messages::Remaining_reports_<ContainerAllocator>  _remaining_reports_type;
  _remaining_reports_type remaining_reports;





  typedef boost::shared_ptr< ::messages::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::messages::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::messages::Status > StatusPtr;
typedef boost::shared_ptr< ::messages::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::Status_<ContainerAllocator1> & lhs, const ::messages::Status_<ContainerAllocator2> & rhs)
{
  return lhs.clock == rhs.clock &&
    lhs.team == rhs.team &&
    lhs.user == rhs.user &&
    lhs.remaining_reports == rhs.remaining_reports;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::Status_<ContainerAllocator1> & lhs, const ::messages::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3971e6279401a5d4495111784f1454fc";
  }

  static const char* value(const ::messages::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3971e6279401a5d4ULL;
  static const uint64_t static_value2 = 0x495111784f1454fcULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/Status";
  }

  static const char* value(const ::messages::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64             clock\n"
"string              team\n"
"string              user\n"
"Remaining_reports   remaining_reports\n"
"================================================================================\n"
"MSG: messages/Remaining_reports\n"
"Critical    critical\n"
"Vitals      vitals \n"
"Injury      injury\n"
"================================================================================\n"
"MSG: messages/Critical\n"
"int32   hemorrhage\n"
"int32   distress\n"
"================================================================================\n"
"MSG: messages/Vitals\n"
"int32 heart\n"
"int32 respiratory\n"
"================================================================================\n"
"MSG: messages/Injury\n"
"int32   trauma_head\n"
"int32   trauma_torso\n"
"int32   trauma_lower_ext\n"
"int32   trauma_upper_ext\n"
"int32   trauma_ocular\n"
"int32   alertness_ocular\n"
"int32   alertness_verbal\n"
"int32   alertness_motor\n"
;
  }

  static const char* value(const ::messages::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clock);
      stream.next(m.team);
      stream.next(m.user);
      stream.next(m.remaining_reports);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::Status_<ContainerAllocator>& v)
  {
    s << indent << "clock: ";
    Printer<double>::stream(s, indent + "  ", v.clock);
    s << indent << "team: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.team);
    s << indent << "user: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user);
    s << indent << "remaining_reports: ";
    s << std::endl;
    Printer< ::messages::Remaining_reports_<ContainerAllocator> >::stream(s, indent + "  ", v.remaining_reports);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_STATUS_H
