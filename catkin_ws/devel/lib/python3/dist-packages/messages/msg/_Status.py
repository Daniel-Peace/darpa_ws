# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from messages/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import messages.msg

class Status(genpy.Message):
  _md5sum = "3971e6279401a5d4495111784f1454fc"
  _type = "messages/Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64             clock
string              team
string              user
Remaining_reports   remaining_reports
================================================================================
MSG: messages/Remaining_reports
Critical    critical
Vitals      vitals 
Injury      injury
================================================================================
MSG: messages/Critical
int32   hemorrhage
int32   distress
================================================================================
MSG: messages/Vitals
int32 heart
int32 respiratory
================================================================================
MSG: messages/Injury
int32   trauma_head
int32   trauma_torso
int32   trauma_lower_ext
int32   trauma_upper_ext
int32   trauma_ocular
int32   alertness_ocular
int32   alertness_verbal
int32   alertness_motor"""
  __slots__ = ['clock','team','user','remaining_reports']
  _slot_types = ['float64','string','string','messages/Remaining_reports']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clock,team,user,remaining_reports

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.clock is None:
        self.clock = 0.
      if self.team is None:
        self.team = ''
      if self.user is None:
        self.user = ''
      if self.remaining_reports is None:
        self.remaining_reports = messages.msg.Remaining_reports()
    else:
      self.clock = 0.
      self.team = ''
      self.user = ''
      self.remaining_reports = messages.msg.Remaining_reports()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.clock
      buff.write(_get_struct_d().pack(_x))
      _x = self.team
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.user
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12i().pack(_x.remaining_reports.critical.hemorrhage, _x.remaining_reports.critical.distress, _x.remaining_reports.vitals.heart, _x.remaining_reports.vitals.respiratory, _x.remaining_reports.injury.trauma_head, _x.remaining_reports.injury.trauma_torso, _x.remaining_reports.injury.trauma_lower_ext, _x.remaining_reports.injury.trauma_upper_ext, _x.remaining_reports.injury.trauma_ocular, _x.remaining_reports.injury.alertness_ocular, _x.remaining_reports.injury.alertness_verbal, _x.remaining_reports.injury.alertness_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.remaining_reports is None:
        self.remaining_reports = messages.msg.Remaining_reports()
      end = 0
      start = end
      end += 8
      (self.clock,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.team = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.team = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.remaining_reports.critical.hemorrhage, _x.remaining_reports.critical.distress, _x.remaining_reports.vitals.heart, _x.remaining_reports.vitals.respiratory, _x.remaining_reports.injury.trauma_head, _x.remaining_reports.injury.trauma_torso, _x.remaining_reports.injury.trauma_lower_ext, _x.remaining_reports.injury.trauma_upper_ext, _x.remaining_reports.injury.trauma_ocular, _x.remaining_reports.injury.alertness_ocular, _x.remaining_reports.injury.alertness_verbal, _x.remaining_reports.injury.alertness_motor,) = _get_struct_12i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.clock
      buff.write(_get_struct_d().pack(_x))
      _x = self.team
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.user
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12i().pack(_x.remaining_reports.critical.hemorrhage, _x.remaining_reports.critical.distress, _x.remaining_reports.vitals.heart, _x.remaining_reports.vitals.respiratory, _x.remaining_reports.injury.trauma_head, _x.remaining_reports.injury.trauma_torso, _x.remaining_reports.injury.trauma_lower_ext, _x.remaining_reports.injury.trauma_upper_ext, _x.remaining_reports.injury.trauma_ocular, _x.remaining_reports.injury.alertness_ocular, _x.remaining_reports.injury.alertness_verbal, _x.remaining_reports.injury.alertness_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.remaining_reports is None:
        self.remaining_reports = messages.msg.Remaining_reports()
      end = 0
      start = end
      end += 8
      (self.clock,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.team = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.team = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.remaining_reports.critical.hemorrhage, _x.remaining_reports.critical.distress, _x.remaining_reports.vitals.heart, _x.remaining_reports.vitals.respiratory, _x.remaining_reports.injury.trauma_head, _x.remaining_reports.injury.trauma_torso, _x.remaining_reports.injury.trauma_lower_ext, _x.remaining_reports.injury.trauma_upper_ext, _x.remaining_reports.injury.trauma_ocular, _x.remaining_reports.injury.alertness_ocular, _x.remaining_reports.injury.alertness_verbal, _x.remaining_reports.injury.alertness_motor,) = _get_struct_12i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12i = None
def _get_struct_12i():
    global _struct_12i
    if _struct_12i is None:
        _struct_12i = struct.Struct("<12i")
    return _struct_12i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
